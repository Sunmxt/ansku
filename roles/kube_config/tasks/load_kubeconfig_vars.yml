---
- set_fact:
    __changed: false

- stat:
    path: "{{ __local_kube_binary_root }}/kubeconfig.autogen.yml"
  register: kubeconfig_yaml

- slurp:
    path: "{{ __local_kube_binary_root }}/kubeconfig.autogen.yml"
  when: kubeconfig_yaml.stat.exists == true
  register: __autogen_file

- set_fact: 
    __kubeconfig_autogen: | 
        {{ __autogen_file['content'] | b64decode }}
  when: kubeconfig_yaml.stat.exists == true

- set_fact:
    __kubeconfig_autogen: {}
  when: __kubeconfig_autogen is not mapping

# Token
- set_fact:
    __kubelet_user_token: "{{ __kubeconfig_autogen.kubelet.token }}"
  when: __kubeconfig_autogen.kubelet is defined and __kubeconfig_autogen.kubelet.token is defined

- set_fact:
    __kube_scheduler_user_token: "{{ __kubeconfig_autogen.kube_scheduler.token }}"
  when: __kubeconfig_autogen.kube_scheduler is defined and __kubeconfig_autogen.kube_scheduler.token is defined

- set_fact:
    __kube_controller_manager_user_token: "{{ __kubeconfig_autogen.kube_controller_manager.token }}"
  when: __kubeconfig_autogen.kube_controller_manager is defined and __kubeconfig_autogen.kube_controller_manager.token is defined

- set_fact:
    __kubeproxy_user_token: "{{ __kubeconfig_autogen.kubeproxy.token }}"
  when: __kubeconfig_autogen.kubeproxy is defined and __kubeconfig_autogen.kubeproxy.token is defined

- set_fact:
    __kubectl_user_token: "{{ __kubeconfig_autogen.kubectl.token }}"
  when: __kubeconfig_autogen.kubectl is defined and __kubeconfig_autogen.kubectl.token is defined

# Group
- set_fact:
    __kube_scheduler_user_group: "{{ __kubeconfig_autogen.kube_scheduler.group }}"
  when: __kubeconfig_autogen.kube_scheduler is defined and __kubeconfig_autogen.kube_scheduler.group is defined

- set_fact:
    __kube_controller_manager_user_group: "{{ __kubeconfig_autogen.kube_controller_manager.group }}"
  when: __kubeconfig_autogen.kube_controller_manager is defined and __kubeconfig_autogen.kube_controller_manager.group is defined

- set_fact:
    __kubelet_user_group: "{{ __kubeconfig_autogen.kubelet.group }}"
  when: __kubeconfig_autogen.kubelet is defined and __kubeconfig_autogen.kubelet.group is defined

- set_fact:
    __kubeproxy_user_group: "{{ __kubeconfig_autogen.kubeproxy.group }}"
  when: __kubeconfig_autogen.kubeproxy is defined and  __kubeconfig_autogen.kubeproxy.group is defined

- set_fact:
    __kubectl_user_group: "{{ __kubeconfig_autogen.kubectl.group }}"
  when: __kubeconfig_autogen.kubectl is defined and __kubeconfig_autogen.kubectl.group is defined

# UID
- set_fact:
    __kubelet_user_uid: "{{ __kubeconfig_autogen.kubelet.uid }}"
  when: __kubeconfig_autogen.kubelet is defined and __kubeconfig_autogen.kubelet.uid is defined

- set_fact:
    __kube_scheduler_user_uid: "{{ __kubeconfig_autogen.kube_scheduler.uid }}"
  when: __kubeconfig_autogen.kube_scheduler is defined and __kubeconfig_autogen.kube_scheduler.uid is defined

- set_fact:
    __kube_controller_manager_user_uid: "{{ __kubeconfig_autogen.kube_controller_manager.uid }}"
  when: __kubeconfig_autogen.kube_controller_manager is defined and __kubeconfig_autogen.kube_controller_manager.uid is defined

- set_fact:
    __kubeproxy_user_uid: "{{ __kubeconfig_autogen.kubeproxy.uid }}"
  when: __kubeconfig_autogen.kubeproxy is defined and __kubeconfig_autogen.kubeproxy.uid is defined

- set_fact:
    __kubectl_user_uid: "{{ __kubeconfig_autogen.kubectl.uid }}"
  when: __kubeconfig_autogen.kubectl is defined and __kubeconfig_autogen.kubectl.uid is defined

# Set default Group
- set_fact:
    __changed: true
    __kubelet_user_group: "system:nodes"
  when: __kubeconfig_autogen.kubelet is not defined or __kubeconfig_autogen.kubelet.group is not defined

- set_fact:
    __changed: true
    __kube_scheduler_user_group: "system"
  when: __kubeconfig_autogen.kube_scheduler is not defined or  __kubeconfig_autogen.kube_scheduler.group is not defined

- set_fact:
    __changed: true
    __kube_controller_manager_user_group: "system"
  when: __kubeconfig_autogen.kube_controller_manager is not defined or  __kubeconfig_autogen.kube_controller_manager.group is not defined

- set_fact:
    __changed: true
    __kubeproxy_user_group: "system"
  when: __kubeconfig_autogen.kubeproxy is not defined or  __kubeconfig_autogen.kubeproxy.group is not defined

- set_fact:
    __changed: true
    __kubectl_user_group: "system:masters"
  when: __kubeconfig_autogen.kubectl is not defined or __kubeconfig_autogen.kubectl.group is not defined

# Autogen token.
- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubelet.token"
  when: __kubelet_user_token is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kube_scheduler.token"
  when: __kube_scheduler_user_token is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kube_controller_manager.token"
  when: __kube_controller_manager_user_token is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubeproxy.token"
  when: __kubeproxy_user_token is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubectl.token"
  when: __kubectl_user_token is not defined

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubelet.token"
  when: __kubelet_user_token is not defined
  register: __kubelet_token_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kube_scheduler.token"
  when: __kube_scheduler_user_token is not defined
  register: __kube_scheduler_token_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kube_controller_manager.token"
  when: __kube_controller_manager_user_token is not defined
  register: __kube_controller_manager_token_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubeproxy.token"
  when: __kubeproxy_user_token is not defined
  register: __kubeproxy_token_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubectl.token"
  when: __kubectl_user_token is not defined
  register: __kubectl_token_raw

- set_fact:
    __changed: true
    __kubelet_user_token: "{{ __kubelet_token_raw['content'] | b64decode }}"
  when: __kubelet_user_token is not defined

- set_fact:
    __changed: true
    __kubeproxy_user_token: "{{ __kubeproxy_token_raw['content'] | b64decode }}"
  when: __kubeproxy_user_token is not defined

- set_fact:
    __changed: true
    __kubectl_user_token: "{{ __kubectl_token_raw['content'] | b64decode }}"
  when: __kubectl_user_token is not defined

- set_fact:
    __changed: true
    __kube_scheduler_user_token: "{{ __kube_scheduler_token_raw['content'] | b64decode }}"
  when: __kube_scheduler_user_token is not defined

- set_fact:
    __changed: true
    __kube_controller_manager_user_token: "{{ __kube_controller_manager_token_raw['content'] | b64decode }}"
  when: __kube_controller_manager_user_token is not defined

# UID
- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=8 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubectl.uid"
  when: __kubectl_user_uid is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=8 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubeproxy.uid"
  when: __kubeproxy_user_uid is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=8 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kubelet.uid"
  when: __kubelet_user_uid is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=8 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kube_scheduler.uid"
  when: __kube_scheduler_user_uid is not defined

- shell: |
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=8 count=1 2>/dev/null >> "{{ __local_kube_client_binary_root }}/kube_controller_manager.uid"
  when: __kube_controller_manager_user_uid is not defined

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubectl.uid"
  when: __kubectl_user_uid is not defined
  register: __kubectl_uid_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kube_controller_manager.uid"
  when: __kube_controller_manager_user_uid is not defined
  register: __kube_controller_manager_uid_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kube_scheduler.uid"
  when: __kube_scheduler_user_uid is not defined
  register: __kube_scheduler_uid_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubelet.uid"
  when: __kubelet_user_uid is not defined
  register: __kubelet_uid_raw

- slurp:
    path: "{{ __local_kube_client_binary_root }}/kubeproxy.uid"
  when: __kubeproxy_user_uid is not defined
  register: __kubeproxy_uid_raw

- set_fact:
    __changed: true
    __kubectl_user_uid: "{{ __kubectl_uid_raw['content'] | b64decode }}"
  when: __kubectl_user_uid is not defined

- set_fact:
    __changed: true
    __kube_scheduler_user_uid: "{{ __kube_scheduler_uid_raw['content'] | b64decode }}"
  when: __kube_scheduler_user_uid is not defined

- set_fact:
    __changed: true
    __kube_controller_manager_user_uid: "{{ __kube_controller_manager_uid_raw['content'] | b64decode }}"
  when: __kube_controller_manager_user_uid is not defined

- set_fact:
    __changed: true
    __kubeproxy_user_uid: "{{ __kubeproxy_uid_raw['content'] | b64decode }}"
  when: __kubeproxy_user_uid is not defined

- set_fact:
    __changed: true
    __kubelet_user_uid: "{{ __kubelet_uid_raw['content'] | b64decode }}"
  when: __kubelet_user_uid is not defined

- set_fact:
    __kubeconfig_autogen:
      kubelet:
        uid: "{{ __kubelet_user_uid }}"
        group: "{{ __kubelet_user_group }}"
        token: "{{ __kubelet_user_token }}"
      kubeproxy:
        uid: "{{ __kubeproxy_user_uid }}"
        group: "{{ __kubeproxy_user_group }}"
        token: "{{ __kubeproxy_user_token }}"
      kube_scheduler:
        uid: "{{ __kube_scheduler_user_uid }}"
        group: "{{ __kube_scheduler_user_group }}"
        token: "{{ __kube_scheduler_user_token }}"
      kube_controller_manager:
        uid: "{{ __kube_controller_manager_user_uid }}"
        group: "{{ __kube_controller_manager_user_group }}"
        token: "{{ __kube_controller_manager_user_token }}"
      kubectl:
        uid: "{{ __kubectl_user_uid }}"
        group: "{{ __kubectl_user_group }}"
        token: "{{ __kubectl_user_token }}"
  when: __changed == true

- copy:
    content: "{{ __kubeconfig_autogen }}"
    dest: "{{ __local_kube_binary_root }}/kubeconfig.autogen.yml"
  when: __changed == true
